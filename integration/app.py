# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AgwGoXWQeW2CbxjwymzVPXcKDvm90mTx
"""

import numpy as np
from flask import Flask, request, render_template
from flask_ngrok import run_with_ngrok
import pickle
from datetime import datetime

# Create an app object using the Flask class.
app = Flask(__name__)
run_with_ngrok(app)

# Load the trained model.
model = pickle.load(open("C:\Users\gryff\OneDrive\Documents\Tamanna\jh24\MenstrualCycleDietExercise\backend\model\flowwell.py", 'rb'))  # Update 'your_model.pkl' with your model file path

# Define the route to be home.
@app.route('/',  methods=['GET', 'POST'])
def home():
    return render_template("C:\Users\gryff\OneDrive\Documents\Tamanna\jh24\MenstrualCycleDietExercise\frontend\form.html")

# Add POST method to the decorator to allow for form submission.
# Redirect to /predict page with the output.
@app.route('/predict', methods=['POST'])
def predict():
    # Assuming the input form in your index.html contains fields for each feature
    features = [float(request.form[feature]) for feature in ['number_of_peak', 'Age', 'Length_of_cycle',
                                                              'Estimated_day_of_ovulution', 'Length_of_Leutal_Phase',
                                                              'Length_of_menses', 'Unusual_Bleeding', 'Weight']]

    # Derive BMI and Mean_of_length_of_cycle from the input data
    BMI = features[7] / ((features[6] / 100) ** 2)  # Weight (kg) / (Height (m) ^ 2)
    Mean_of_length_of_cycle = np.mean([features[2], features[4]])  # Mean of Length_of_cycle and Length_of_Leutal_Phase

    # Add the derived features to the feature list
    features.extend([BMI, Mean_of_length_of_cycle])

    # Assuming your model expects input features in the form [number_of_peak, Age, Length_of_cycle, ..., BMI, Mean_of_length_of_cycle]
    features = np.array([features])

    prediction = model.predict(features)
    output = round(prediction[0], 2)

    return render_template("C:\Users\gryff\OneDrive\Documents\Tamanna\jh24\MenstrualCycleDietExercise\frontend\form.html", prediction_text='Predicted heart disease percentage: {}'.format(output))

def index():
    cycle_day = None
    if request.method == 'POST':
        age = request.form['age']
        weight = request.form['weight']
        height = request.form['height']
        cycle_length = int(request.form['cycleLength'])
        menses_length = int(request.form['mensesLength'])
        unusual_bleeding = request.form.get('unusualBleeding') == 'on'
        last_period_start = request.form['lastPeriodStart']

        last_period_date = datetime.strptime(last_period_start, '%Y-%m-%d')
        current_date = datetime.now()
        day_diff = (current_date - last_period_date).days
        cycle_day = day_diff % cycle_length

    return render_template("C:\Users\gryff\OneDrive\Documents\Tamanna\jh24\MenstrualCycleDietExercise\frontend\form.html", cycle_day=cycle_day)

if __name__ == "__main__":
    app.run(debug=True)